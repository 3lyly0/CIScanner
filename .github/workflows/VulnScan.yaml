name: Subdomain & Vulnerability Scanner

on:
  workflow_dispatch:
    inputs:
      domain:
        description: 'Domain to scan'
        required: true
        default: 'example.com'
  schedule:
    - cron: '0 6 * * 1'  # Every Monday at 6 AM UTC

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install Tools
        run: |
          go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
          go install -v github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest
          sudo apt-get update && sudo apt-get install -y jq

      - name: Validate Secrets
        run: |
          if [ -z "${{ secrets.DISCORD_WEBHOOK }}" ]; then
            echo "::error::DISCORD_WEBHOOK secret is not set"
            exit 1
          fi
          echo "DISCORD_WEBHOOK=${{ secrets.DISCORD_WEBHOOK }}" >> $GITHUB_ENV

      - name: Set Domain
        id: set_domain
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "DOMAIN=${{ github.event.inputs.domain }}" >> $GITHUB_ENV
          else
            echo "DOMAIN=example.com" >> $GITHUB_ENV
          fi

      # --- NEW NOTIFICATION SCRIPT ---
      - name: Create Notification Script
        run: |
          cat << 'EOF' > notify.sh
          #!/bin/bash
          set -e

          WEBHOOK_URL="$1"
          DOMAIN="$2"

          # --- Helper function to send a Discord embed ---
          send_embed() {
              local title="$1"
              local description="$2"
              local color="$3"
              local footer_text="$4"

              # Use printf to create the description with actual newlines
              local payload
              payload=$(jq -n \
                  --arg title "$title" \
                  --arg description "$description" \
                  --argjson color "$color" \
                  --arg footer "$footer_text" \
                  '{
                      "embeds": [{
                          "title": $title,
                          "description": $description,
                          "color": $color,
                          "footer": {"text": $footer}
                      }]
                  }')
              
              curl -s -H "Content-Type: application/json" -X POST -d "$payload" "$WEBHOOK_URL"
          }

          # --- Function to send a long list in chunks ---
          send_list_in_chunks() {
              local file_path="$1"
              local list_title="$2"
              local color="$3"
              
              if [ ! -f "$file_path" ] || [ ! -s "$file_path" ]; then
                  return
              fi

              local total_lines
              total_lines=$(wc -l < "$file_path")
              local part_num=1
              local chunk=""
              local DISCORD_FIELD_LIMIT=1000

              while IFS= read -r line; do
                  local new_chunk
                  printf -v new_chunk '%s%s\n' "$chunk" "$line"

                  if [ ${#new_chunk} -gt $DISCORD_FIELD_LIMIT ]; then
                      local description
                      printf -v description '```\n%s\n```' "$chunk"
                      send_embed "$list_title (Part $part_num/$(( (total_lines + DISCORD_FIELD_LIMIT - 1) / DISCORD_FIELD_LIMIT )))" "$description" "$color" "Total items: $total_lines"
                      
                      printf -v chunk '%s\n' "$line"
                      ((part_num++))
                  else
                      chunk="$new_chunk"
                  fi
              done < "$file_path"

              if [ -n "$chunk" ]; then
                  local description
                  printf -v description '```\n%s\n```' "$chunk"
                  send_embed "$list_title (Part $part_num/$(( (total_lines + DISCORD_FIELD_LIMIT - 1) / DISCORD_FIELD_LIMIT )))" "$description" "$color" "Total items: $total_lines"
              fi
          }

          # --- Main execution based on arguments ---
          case "$3" in
            "start")
              send_embed "🔍 Scan Started" "**Domain:** $DOMAIN\n**Trigger:** $4\n**Tools:** Subfinder + Nuclei" "16776960" "Scan initiated"
              ;;
            "subfinder")
              send_embed "✅ Subfinder Complete" "**Domain:** $DOMAIN\n**Subdomains Found:** $4" "5814783" "Subfinder scan finished"
              send_list_in_chunks "subdomains.txt" "📄 Subdomain List" "10181038"
              ;;
            "nuclei_summary")
              if [ "$4" -gt 0 ]; then
                send_embed "🚨 Vulnerabilities Found!" "**Domain:** $DOMAIN\n**Count:** $4\n\nSending each vulnerability as a separate message..." "15548997" "Nuclei scan finished"
              else
                send_embed "✅ Nuclei Complete" "**Domain:** $DOMAIN\nNo critical/high/medium vulnerabilities found." "5763719" "Nuclei scan finished"
              fi
              ;;
            "vulnerability")
              # Format the vulnerability line for better readability
              VULN_INFO=$(echo "$4" | jq -Rr 'split(" ") | .[0] as $url | .[1:] | join(" ") | "[\($url)](\($url))\n\(.)"')
              send_embed "🚨 Vulnerability Found" "**Domain:** $DOMAIN\n\`\`\`\n$4\n\`\`\`" "16711680" "Nuclei finding"
              ;;
          esac
          EOF
          chmod +x notify.sh

      # --- MODIFIED NOTIFICATION STEPS ---
      - name: Notify Start
        run: |
          ./notify.sh "${{ env.DISCORD_WEBHOOK }}" "${{ env.DOMAIN }}" "start" "${{ github.event_name }}"

      - name: Run Subfinder
        run: |
          subfinder -d ${{ env.DOMAIN }} -silent -o subdomains.txt
          echo "SUBDOMAINS_FOUND=$(wc -l < subdomains.txt)" >> $GITHUB_ENV

      - name: Notify Subfinder Results
        run: |
          ./notify.sh "${{ env.DISCORD_WEBHOOK }}" "${{ env.DOMAIN }}" "subfinder" "${{ env.SUBDOMAINS_FOUND }}"

      - name: Run Nuclei
        run: |
          nuclei -l subdomains.txt -severity critical,high,medium -silent -o nuclei-results.txt
          echo "VULNS_FOUND=$(wc -l < nuclei-results.txt)" >> $GITHUB_ENV

      - name: Notify Nuclei Summary
        run: |
          ./notify.sh "${{ env.DISCORD_WEBHOOK }}" "${{ env.DOMAIN }}" "nuclei_summary" "${{ env.VULNS_FOUND }}"

      - name: Send Individual Vulnerabilities
        if: env.VULNS_FOUND > 0
        run: |
          while IFS= read -r vuln; do
            ./notify.sh "${{ env.DISCORD_WEBHOOK }}" "${{ env.DOMAIN }}" "vulnerability" "$vuln"
            sleep 1.5 # Small delay to avoid rate limiting
          done < nuclei-results.txt

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: scan-results
          path: |
            subdomains.txt
            nuclei-results.txt

      - name: Cleanup
        if: always()
        run: |
          rm -f notify.sh subdomains.txt nuclei-results.txt
