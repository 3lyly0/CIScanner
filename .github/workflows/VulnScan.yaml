name: Subdomain & Vulnerability Scanner

on:
  workflow_dispatch:
    inputs:
      domain:
        description: 'Domain to scan'
        required: true
        default: 'example.com'
  schedule:
    - cron: '0 6 * * 1'  # Every Monday at 6 AM UTC

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install Tools
        run: |
          go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
          go install -v github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest
          sudo apt-get update && sudo apt-get install -y jq

      - name: Validate Secrets
        run: |
          if [ -z "${{ secrets.DISCORD_WEBHOOK }}" ]; then
            echo "::error::DISCORD_WEBHOOK secret is not set"
            exit 1
          fi
          echo "DISCORD_WEBHOOK=${{ secrets.DISCORD_WEBHOOK }}" >> $GITHUB_ENV

      - name: Set Domain
        id: set_domain
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "DOMAIN=${{ github.event.inputs.domain }}" >> $GITHUB_ENV
          else
            echo "DOMAIN=example.com" >> $GITHUB_ENV

      - name: Notify Start
        run: |
          MESSAGE="üîç **Scan Started**
**Domain:** ${{ env.DOMAIN }}
**Trigger:** ${{ github.event_name }}
**Tools:** Subfinder + Nuclei"
          curl -X POST -H "Content-Type: application/json" \
            -d "{\"content\": $(echo "$MESSAGE" | jq -Rs .)}" \
            "${{ env.DISCORD_WEBHOOK }}"

      - name: Run Subfinder
        run: |
          subfinder -d ${{ env.DOMAIN }} -silent -o subdomains.txt
          echo "SUBDOMAINS_FOUND=$(wc -l < subdomains.txt)" >> $GITHUB_ENV

      - name: Notify Subfinder Results
        run: |
          SUBDOMAINS_CONTENT=$(cat subdomains.txt)
          MESSAGE="‚úÖ **Subfinder Complete**
**Domain:** ${{ env.DOMAIN }}
**Subdomains Found:** ${{ env.SUBDOMAINS_FOUND }}

\`\`\`
$SUBDOMAINS_CONTENT
\`\`\`"

          # Truncate if too long
          if [ ${#MESSAGE} -gt 1900 ]; then
            TRUNCATED=$(echo "$SUBDOMAINS_CONTENT" | head -c 1800)
            MESSAGE="‚úÖ **Subfinder Complete**
**Domain:** ${{ env.DOMAIN }}
**Subdomains Found:** ${{ env.SUBDOMAINS_FOUND }}

\`\`\`
$TRUNCATED... [truncated]
\`\`\`"
          fi

          curl -X POST -H "Content-Type: application/json" \
            -d "{\"content\": $(echo "$MESSAGE" | jq -Rs .)}" \
            "${{ env.DISCORD_WEBHOOK }}"

      - name: Run Nuclei
        run: |
          nuclei -l subdomains.txt -severity critical,high,medium -silent -o nuclei-results.txt
          echo "VULNS_FOUND=$(wc -l < nuclei-results.txt)" >> $GITHUB_ENV

      - name: Notify Nuclei Summary
        run: |
          if [ ${{ env.VULNS_FOUND }} -gt 0 ]; then
            MESSAGE="üö® **Vulnerabilities Found!**
**Domain:** ${{ env.DOMAIN }}
**Count:** ${{ env.VULNS_FOUND }}
Sending each vulnerability as a separate message..."
          else
            MESSAGE="‚úÖ **Nuclei Complete**
**Domain:** ${{ env.DOMAIN }}
No critical/high/medium vulnerabilities found"
          fi
          curl -X POST -H "Content-Type: application/json" \
            -d "{\"content\": $(echo "$MESSAGE" | jq -Rs .)}" \
            "${{ env.DISCORD_WEBHOOK }}"

      - name: Send Individual Vulnerabilities
        if: env.VULNS_FOUND > 0
        run: |
          while IFS= read -r vuln; do
            MESSAGE="üö® **Vulnerability Found**
**Domain:** ${{ env.DOMAIN }}

\`\`\`
$vuln
\`\`\`"
            curl -X POST -H "Content-Type: application/json" \
              -d "{\"content\": $(echo "$MESSAGE" | jq -Rs .)}" \
              "${{ env.DISCORD_WEBHOOK }}"
            sleep 1
          done < nuclei-results.txt

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: scan-results
          path: |
            subdomains.txt
            nuclei-results.txt
