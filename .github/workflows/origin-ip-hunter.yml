name: Origin IP Hunter

on:
  workflow_dispatch:
    inputs:
      domain:
        description: 'Target domain to hunt for its origin IP'
        required: true
        default: 'example.com'
      # Optional: Add Shodan API key for more power
      shodan_api_key:
        description: 'Shodan API Key (optional, for enhanced results)'
        required: false

jobs:
  hunt:
    runs-on: ubuntu-latest
    permissions:
      contents: write # To upload artifacts
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install Hunting Tools
        run: |
          # ProjectDiscovery tools
          go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
          go install -v github.com/projectdiscovery/puredns/v2/cmd/puredns@latest
          go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest
          go install -v github.com/projectdiscovery/naabu/v2/cmd/naabu@latest
          go install -v github.com/projectdiscovery/uncover/cmd/uncover@latest
          # Other essential tools
          sudo apt-get update && sudo apt-get install -y jq whois nmap curl
          # Favicon hashing tool
          go install github.com/sensepost/gowitness@latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Set Domain
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "DOMAIN=${{ github.event.inputs.domain }}" >> $GITHUB_ENV
          else
            echo "DOMAIN=example.com" >> $GITHUB_ENV
          fi
          echo "TARGET_DOMAIN=$(echo ${{ env.DOMAIN }} | awk -F. '{print $(NF-1)"."$NF}')" >> $GITHUB_ENV

      - name: Create Notification Script
        run: |
          cat << 'EOF' > notify.sh
          #!/bin/bash
          set -e
          WEBHOOK_URL="$1"
          DOMAIN="$2"
          send_embed() {
              local title="$1"
              local description="$2"
              local color="$3"
              local payload
              payload=$(jq -n \
                  --arg title "$title" \
                  --arg description "$description" \
                  --argjson color "$color" \
                  --arg footer "Hunt completed at $(date -u '+%Y-%m-%d %H:%M:%S UTC')" \
                  '{
                      "embeds": [{
                          "title": $title,
                          "description": $description,
                          "color": $color,
                          "footer": {"text": $footer}
                      }]
                  }')
              curl -s -H "Content-Type: application/json" -X POST -d "$payload" "$WEBHOOK_URL"
          }
          case "$3" in
            "start")
              send_embed "🎯 Origin IP Hunt Started" "**Target:** $DOMAIN\n**Methodology:** Multi-vector recon & correlation" "16711680"
              ;;
            "summary")
              printf -v desc '**Target:** %s\n\n**🔍 Hunt Summary:**\n- **Total Subdomains Found:** %s\n- **Total Unique IPs Discovered:** %s\n- **Potential Origin IPs:** %s\n- **Known WAF/CDN IPs:** %s\n\n📦 The full detailed report with all evidence is available in the [GitHub Actions artifacts](%s).' \
                "$DOMAIN" "$4" "$5" "$6" "$7" "$8"
              send_embed "📋 IP Hunt Report for $DOMAIN" "$desc" "10181038"
              ;;
          esac
          EOF
          chmod +x notify.sh

      - name: Notify Start
        run: |
          ./notify.sh "${{ secrets.DISCORD_WEBHOOK }}" "${{ env.DOMAIN }}" "start"

      - name: 1️⃣ Massive Subdomain Discovery
        run: |
          echo "[+] Discovering subdomains with multiple sources..."
          subfinder -d ${{ env.DOMAIN }} -silent -o subdomains_subfinder.txt
          # Use a small, effective wordlist for bruteforcing
          puredns bruteforce ${{ env.TARGET_DOMAIN }} -w /usr/share/wordlists/seclists/Discovery/DNS/subdomains-top1million-5000.txt -r 8.8.8.8,1.1.1.1 -silent -o subdomains_bruteforce.txt
          cat subdomains_subfinder.txt subdomains_bruteforce.txt | sort -u > all_subdomains.txt
          echo "SUBDOMAINS_COUNT=$(wc -l < all_subdomains.txt)" >> $GITHUB_ENV

      - name: 2️⃣ DNS Deep Dive & IP Harvesting
        run: |
          echo "[+] Performing deep DNS analysis..."
          # Get all record types for the main domain
          dig +noall +answer ${{ env.DOMAIN }} ANY > dns_main.txt
          # Get A records for all subdomains
          cat all_subdomains.txt | xargs -I {} dig +short {} A | grep -E '([0-9]{1,3}\.){3}[0-9]{1,3}' > dns_subdomain_ips.txt
          # Get MX records (often point to origin)
          dig +short ${{ env.DOMAIN }} MX | awk '{print $2}' | xargs -I {} dig +short {} A | grep -E '([0-9]{1,3}\.){3}[0-9]{1,3}' > dns_mx_ips.txt
          # Combine all found IPs
          cat dns_main.txt dns_subdomain_ips.txt dns_mx_ips.txt | grep -E '([0-9]{1,3}\.){3}[0-9]{1,3}' | sort -u > all_discovered_ips.txt
          echo "TOTAL_IPS=$(wc -l < all_discovered_ips.txt)" >> $GITHUB_ENV

      - name: 3️⃣ Probing & WAF/CDN Identification
        run: |
          echo "[+] Probing hosts and identifying WAFs/CDNs..."
          # httpx will detect technologies and CDN/WAF usage
          cat all_subdomains.txt | httpx -silent -cdn -tech-detect -status-code -o live_hosts.txt
          # Extract IPs from live hosts
          cat live_hosts.txt | awk '{print $2}' | sort -u > live_host_ips.txt
          # Identify known CDN/WAF IPs
          grep -i -E 'cloudflare|incapsula|fastly|cloudfront|akamai' live_hosts.txt | awk '{print $2}' | sort -u > cdn_waf_ips.txt
          echo "CDN_WAF_IPS_COUNT=$(wc -l < cdn_waf_ips.txt)" >> $GITHUB_ENV

      - name: 4️⃣ Favicon Hashing (Shodan Correlation)
        run: |
          echo "[+] Calculating Favicon hashes for Shodan correlation..."
          mkdir -p favicons
          # Get favicon from the main domain
          gowitness single ${{ env.DOMAIN }} -P ./favicons --disable-logging || true
          # Calculate murmurhash
          if [ -f "./favicons/${{ env.DOMAIN }}.png" ]; then
            FAVICON_HASH=$(gowitness hash ./favicons/${{ env.DOMAIN }}.png | awk '{print $2}')
            echo "FAVICON_HASH=$FAVICON_HASH" >> $GITHUB_ENV
            echo "[+] Favicon Hash for ${{ env.DOMAIN }}: $FAVICON_HASH"
            echo "Search this hash on Shodan to find other servers on the same infrastructure." >> potential_origin_ips.txt
          fi

      - name: 5️⃣ ASN & Netblock Expansion
        run: |
          echo "[+] Expanding search to discovered netblocks..."
          > netblock_ips.txt
          while read -r ip; do
            echo "[+] Investigating IP: $ip"
            # Get CIDR from whois
            CIDR=$(whois -h whois.radb.net "$ip" | grep -Eo "route:[0-9 ]+" | awk '{print $2}' | head -1)
            if [ -n "$CIDR" ]; then
              echo "[+] Found CIDR: $CIDR"
              # Scan top 100 ports in the netblock
              naabu -cidr "$CIDR" -top-ports 100 -silent -o netblock_scan_temp.txt
              cat netblock_scan_temp.txt >> netblock_ips.txt
            fi
          done < live_host_ips.txt
          sort -u netblock_ips.txt -o netblock_ips.txt

      - name: 6️⃣ Correlate & Generate Final Report
        run: |
          echo "========================================" > real_ip_report.txt
          echo "   Origin IP Hunt Report for ${{ env.DOMAIN }}" >> real_ip_report.txt
          echo "========================================" >> real_ip_report.txt
          echo "" >> real_ip_report.txt
          echo "--- [1] POTENTIAL ORIGIN IPS ---" >> real_ip_report.txt
          echo "These IPs are NOT from known CDNs/WAFs and are strong candidates." >> real_ip_report.txt
          # IPs that are live but not in the CDN list
          comm -23 <(sort live_host_ips.txt) <(sort cdn_waf_ips.txt) >> potential_origin_ips.txt
          cat potential_origin_ips.txt >> real_ip_report.txt
          echo "" >> real_ip_report.txt
          echo "--- [2] FAVICON HASH ---" >> real_ip_report.txt
          echo "Use this hash on Shodan/censys to find related infrastructure." >> real_ip_report.txt
          echo "Favicon Hash: ${{ env.FAVICON_HASH }}" >> real_ip_report.txt
          echo "" >> real_ip_report.txt
          echo "--- [3] NETBLOCK DISCOVERIES ---" >> real_ip_report.txt
          echo "Live hosts found in the same ASN as the target's servers." >> real_ip_report.txt
          cat netblock_ips.txt >> real_ip_report.txt
          echo "" >> real_ip_report.txt
          echo "--- [4] ALL DISCOVERED IPS ---" >> real_ip_report.txt
          cat all_discovered_ips.txt >> real_ip_report.txt
          echo "" >> real_ip_report.txt
          echo "--- [5] ALL LIVE HOSTS ---" >> real_ip_report.txt
          cat live_hosts.txt >> real_ip_report.txt
          echo "POTENTIAL_ORIGIN_COUNT=$(wc -l < potential_origin_ips.txt)" >> $GITHUB_ENV

      - name: Notify Final Summary
        env:
          GITHUB_RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          ./notify.sh "${{ secrets.DISCORD_WEBHOOK }}" "${{ env.DOMAIN }}" "summary" \
            "${{ env.SUBDOMAINS_COUNT }}" \
            "${{ env.TOTAL_IPS }}" \
            "${{ env.POTENTIAL_ORIGIN_COUNT }}" \
            "${{ env.CDN_WAF_IPS_COUNT }}" \
            "${{ env.GITHUB_RUN_URL }}"

      - name: Upload Full Report as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ip-hunt-report-${{ env.DOMAIN }}-${{ github.run_number }}
          path: |
            real_ip_report.txt
            all_subdomains.txt
            live_hosts.txt
            potential_origin_ips.txt
          retention-days: 15

      - name: Cleanup
        if: always()
        run: |
          rm -rf notify.sh *.txt favicons/
